# -*- coding: utf-8 -*-
"""SQLinPYthon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14R68UYvy1DI2vo742UYIZs1l9KzpIoPe
"""

from google.colab import files
    uploaded = files.upload()

import pandas as pd
import sqlite3
import matplotlib.pyplot as plt
import os

# --- 1. SETUP: Define file paths and database connection ---
CSV_FILE = 'Coffee_Chain_Sales .csv'
DB_FILE = 'sales_data.db'
TABLE_NAME = 'sales_table'

# --- 2. CONNECT TO DATABASE & LOAD DATA ---
print("--- 1. Connecting to DB and Loading Data ---")

# Connect to SQLite database. It will create the file if it doesn't exist.
conn = sqlite3.connect(DB_FILE)

# Load the CSV data into a pandas DataFrame
# Note: The file name has a space, which is handled here.
try:
    df_csv = pd.read_csv(CSV_FILE)
except FileNotFoundError:
    print(f"Error: The file {CSV_FILE} was not found. Please ensure it is in the same directory.")
    conn.close()
    exit()

# Clean column names (replace spaces with underscores, especially for the "Target_sales " column)
df_csv.columns = df_csv.columns.str.strip().str.replace(' ', '_')

# Write the DataFrame to a new SQLite table, replacing it if it already exists
df_csv.to_sql(TABLE_NAME, conn, if_exists='replace', index=False)
print(f"✅ Data from '{CSV_FILE}' loaded into SQLite table '{TABLE_NAME}'.")


# --- 3. RUN SQL QUERIES (1-2 QUERIES) ---
# Objective: Pull simple sales info (total revenue) grouped by product.

# Query 1: Total Revenue by Product (Primary Objective)
query_1 = f"""
SELECT
    Product,
    SUM(Sales) AS Total_Revenue
FROM
    {TABLE_NAME}
GROUP BY
    Product
ORDER BY
    Total_Revenue DESC;
"""

# Query 2: Total Profit by Market Size (Additional info)
query_2 = f"""
SELECT
    Market_size,
    SUM(Profit) AS Total_Profit
FROM
    {TABLE_NAME}
GROUP BY
    Market_size
ORDER BY
    Total_Profit DESC;
"""

# Execute the main query and load results into a new DataFrame
df_revenue_summary = pd.read_sql_query(query_1, conn)

# Close the database connection
conn.close()

# --- 4. DISPLAY OUTPUT USING PRINT STATEMENTS ---
print("\n--- 2. SQL Query Results (Total Revenue by Product) ---")
print(df_revenue_summary.to_markdown(index=False, numalign="left", stralign="left"))


# --- 5. CREATE AND DISPLAY BASIC MATPLOTLIB BAR CHART ---
print("\n--- 3. Generating Sales Chart ---")

plt.figure(figsize=(12, 6))

# Use the retrieved DataFrame for plotting
df_revenue_summary.sort_values(by='Total_Revenue', ascending=False, inplace=True)
plt.bar(df_revenue_summary['Product'], df_revenue_summary['Total_Revenue'], color='skyblue')

plt.title('Total Sales Revenue by Product Category (Top 10)')
plt.xlabel('Product')
plt.ylabel('Total Revenue (in 100,000s)')
plt.xticks(rotation=45, ha='right') # Rotate product names for better visibility
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# Save the chart (optional step mentioned in hints)
chart_file = 'product_sales_chart.png'
plt.savefig(chart_file)
print(f"✅ Bar chart saved as '{chart_file}'.")

# Display the chart (The output below will show the chart.)
plt.show()

# Print summary of the second query result (Optional print for second query)
print("\n--- 4. Secondary SQL Query Insight (Total Profit by Market Size) ---")
df_profit_summary = pd.read_sql_query(query_2.replace(TABLE_NAME, TABLE_NAME), sqlite3.connect(DB_FILE))
print(f"Total Profit in Major Markets: ${df_profit_summary[df_profit_summary['Market_size'] == 'Major Market']['Total_Profit'].values[0]:,.0f}")
print(f"Total Profit in Small Markets: ${df_profit_summary[df_profit_summary['Market_size'] == 'Small Market']['Total_Profit'].values[0]:,.0f}")